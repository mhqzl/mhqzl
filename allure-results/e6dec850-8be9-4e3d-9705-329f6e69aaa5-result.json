{"name": "test_create_post", "status": "broken", "statusDetails": {"message": "requests.exceptions.MissingSchema: Invalid URL 'c/posts': No scheme supplied. Perhaps you meant https://c/posts?", "trace": "self = <test_api.TestAPIs object at 0x00000168978606D0>\n\n    def test_create_post(self):\n        \"\"\"测试创建新文章\"\"\"\n        payload = {\n            \"title\": \"foo\",\n            \"body\": \"bar\",\n            \"userId\": 1\n        }\n>       response = requests.post(f\"{self.base_url}/posts\", json=payload)\n\ntest_suite\\test_api.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\lib\\site-packages\\requests\\api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n.venv\\lib\\site-packages\\requests\\api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n.venv\\lib\\site-packages\\requests\\sessions.py:575: in request\n    prep = self.prepare_request(req)\n.venv\\lib\\site-packages\\requests\\sessions.py:486: in prepare_request\n    p.prepare(\n.venv\\lib\\site-packages\\requests\\models.py:368: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PreparedRequest [POST]>, url = 'c/posts', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n>           raise MissingSchema(\n                f\"Invalid URL {url!r}: No scheme supplied. \"\n                f\"Perhaps you meant https://{url}?\"\n            )\nE           requests.exceptions.MissingSchema: Invalid URL 'c/posts': No scheme supplied. Perhaps you meant https://c/posts?\n\n.venv\\lib\\site-packages\\requests\\models.py:439: MissingSchema"}, "description": "测试创建新文章", "start": 1748174746624, "stop": 1748174746625, "uuid": "7af77b28-7fe1-44fd-8a54-9a41c2024140", "historyId": "1d5fd13caef08da909289494909a06a0", "testCaseId": "1d5fd13caef08da909289494909a06a0", "fullName": "test_suite.test_api.TestAPIs#test_create_post", "labels": [{"name": "parentSuite", "value": "test_suite"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestAPIs"}, {"name": "host", "value": "闵行权志龙"}, {"name": "thread", "value": "24616-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_suite.test_api"}]}